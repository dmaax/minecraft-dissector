name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - run: sudo add-apt-repository ppa:wireshark-dev/stable
      - run: sudo apt-get install -y make gcc pkg-config wireshark-dev

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: make packet-minecraft.so

      - uses: actions/upload-artifact@v4
        with:
          name: linux
          path: packet-minecraft.so

  build-windows:
    runs-on: windows-latest
    env:
      PLATFORM: x64
      WIRESHARK_LIB_DIR: C:/wireshark-win64-libs-4.2
      GLIB_INCLUDE: vcpkg-export-20231017-x64-windows-ws/installed/x64-windows/include
    steps:
      - name: Checkout Wireshark
        uses: actions/checkout@v4
        with:
          repository: wireshark/wireshark
          ref: wireshark-4.2.5
          path: wireshark

      - name: Install Wireshark dependencies
        run: choco install -y --no-progress cmake winflexbison3 strawberryperl asciidoctorj xsltproc docbook-bundle

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1.3
        with:
          vs-version: 17

      - name: Create build directory
        run: mkdir build
        working-directory: wireshark

      - name: Configure CMake
        run: cmake -A x64 .. -DBUILD_wireshark=OFF
        working-directory: wireshark/build

      - name: Build epan
        run: cmake --build . --config RelWithDebInfo --target epan
        working-directory: wireshark/build

      - name: Checkout dissector
        uses: actions/checkout@v4
        with:
          path: dissector
          submodules: true

      - name: Install make and mingw
        run: choco install -y --no-progress make mingw

      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Build DLL
        run: make packet-minecraft.dll
        env:
          CPPFLAGS: -I../wireshark/build -I../wireshark -I${{ env.WIRESHARK_LIB_DIR }}/${{ env.GLIB_INCLUDE }} -D_SSIZE_T_DEFINED
          LDLIBS: ../wireshark/build/run/RelWithDebInfo/wireshark.lib
          CC: gcc
        working-directory: dissector

      - uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dissector/packet-minecraft.dll

  publish:
    needs: [build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux

      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload packet-minecraft.so
        uses: actions/upload-release-asset@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./packet-minecraft.so
          asset_name: packet-minecraft.so
          asset_content_type: application/octet-stream

      - name: Upload packet-minecraft.dll
        uses: actions/upload-release-asset@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./packet-minecraft.dll
          asset_name: packet-minecraft.dll
          asset_content_type: application/octet-stream
