name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - run: sudo add-apt-repository ppa:wireshark-dev/stable
      - run: sudo apt-get install -y make gcc pkg-config wireshark-dev

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: make packet-minecraft.so

      - uses: actions/upload-artifact@v4
        with:
          name: linux
          path: packet-minecraft.so

  build-windows:
    runs-on: windows-latest
    env:
      PLATFORM: x64
      WIRESHARK_LIB_DIR: C:/wireshark-win64-libs-4.2
      GLIB_INCLUDE: vcpkg-export-20231017-1-x64-windows-ws/installed/x64-windows/include
    steps:
      - name: Checkout Wireshark
        uses: actions/checkout@v4
        with:
          repository: wireshark/wireshark
          ref: wireshark-4.2.5
          path: wireshark

      - name: Install Wireshark dependencies
        run: choco install -y --no-progress cmake winflexbison3 strawberryperl asciidoctorj xsltproc docbook-bundle

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1.3
        with:
          vs-version: 17

      - name: Create build directory
        run: mkdir build
        working-directory: wireshark

      - name: Configure CMake
        run: cmake -A x64 .. -DUSE_qt6=OFF -DBUILD_wireshark=OFF -DENABLE_APPLICATION_BUNDLE=OFF
        working-directory: wireshark/build

      - name: Build epan and required libraries
        run: |
          cmake --build . --config RelWithDebInfo --target epan
          cmake --build . --config RelWithDebInfo --target wiretap  
          cmake --build . --config RelWithDebInfo --target wsutil
        working-directory: wireshark/build

      - name: Copy config header and create missing headers
        run: |
          # Copia o config.h
          Copy-Item "wireshark\build\config.h" "wireshark\"
          
          # Cria wireshark.h com encoding correto (UTF-8)
          if (!(Test-Path "wireshark\wireshark.h")) {
            $content = '#include "config.h"'
            [System.IO.File]::WriteAllText("wireshark\wireshark.h", $content, [System.Text.UTF8Encoding]::new($false))
            Write-Host "Created wireshark.h"
          }
          
          # Cria ws_symbol_export.h em múltiplos locais onde pode ser necessário
          $wsSymbolContent = @"
#ifndef __WS_SYMBOL_EXPORT_H__
#define __WS_SYMBOL_EXPORT_H__

#ifdef _WIN32
  #ifdef BUILDING_DLL
    #define WS_DLL_PUBLIC __declspec(dllexport)
  #else
    #define WS_DLL_PUBLIC __declspec(dllimport)
  #endif
  #define WS_DLL_LOCAL
#else
  #define WS_DLL_PUBLIC __attribute__ ((visibility ("default")))
  #define WS_DLL_LOCAL  __attribute__ ((visibility ("hidden")))
#endif

#endif /* __WS_SYMBOL_EXPORT_H__ */
"@
          
          # Cria em vários diretórios onde pode ser procurado
          $locations = @(
            "wireshark\ws_symbol_export.h",
            "wireshark\wsutil\ws_symbol_export.h", 
            "wireshark\wiretap\ws_symbol_export.h",
            "wireshark\epan\ws_symbol_export.h"
          )
          
          foreach ($location in $locations) {
            $dir = Split-Path $location -Parent
            if (!(Test-Path $dir)) {
              New-Item -ItemType Directory -Path $dir -Force | Out-Null
            }
            if (!(Test-Path $location)) {
              [System.IO.File]::WriteAllText($location, $wsSymbolContent, [System.Text.UTF8Encoding]::new($false))
              Write-Host "Created $location"
            }
          }
        shell: powershell

      - name: Debug - Check created files
        run: |
          Write-Host "=== Checking created files ==="
          if (Test-Path "wireshark\wireshark.h") {
            Write-Host "✓ wireshark.h exists"
            Get-Content "wireshark\wireshark.h" | Write-Host
          } else {
            Write-Host "✗ wireshark.h missing"
          }
          
          Write-Host "`n=== Checking ws_symbol_export.h locations ==="
          $locations = @(
            "wireshark\ws_symbol_export.h",
            "wireshark\wsutil\ws_symbol_export.h", 
            "wireshark\wiretap\ws_symbol_export.h"
          )
          foreach ($loc in $locations) {
            if (Test-Path $loc) {
              Write-Host "✓ $loc exists"
            } else {
              Write-Host "✗ $loc missing"
            }
          }
          
          Write-Host "`n=== Directory structure ==="
          Get-ChildItem "wireshark" -Recurse -Name | Select-Object -First 20 | Write-Host
        shell: powershell

      - name: Checkout dissector
        uses: actions/checkout@v4
        with:
          path: dissector
          submodules: true

      - name: Install make and mingw
        run: choco install -y --no-progress make mingw

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build DLL
        run: make packet-minecraft.dll
        env:
          CPPFLAGS: -I../wireshark/build -I../wireshark -I../wireshark/epan -I../wireshark/wiretap -I../wireshark/wsutil -I../wireshark/build/wsutil -I${{ env.WIRESHARK_LIB_DIR }}/${{ env.GLIB_INCLUDE }} -D_SSIZE_T_DEFINED -DHAVE_CONFIG_H -DBUILDING_DLL
          LDLIBS: ../wireshark/build/run/RelWithDebInfo/epan.lib ../wireshark/build/run/RelWithDebInfo/wiretap.lib ../wireshark/build/run/RelWithDebInfo/wsutil.lib
          CC: gcc
        working-directory: dissector

      - uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dissector/packet-minecraft.dll

  publish:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux

      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            packet-minecraft.so
            packet-minecraft.dll